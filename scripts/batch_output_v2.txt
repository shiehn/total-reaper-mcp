# Tool definitions for app.py:

Tool(
            name="get_track_volume",
            description="Get track volume in dB",
            inputSchema={
                "type": "object",
                "properties": {
                    "track_index": {
                        "type": "integer",
                        "description": "The track index (0-based)",
                        "minimum": 0
                    }
                },
                "required": ["track_index"]
            }
        ),
Tool(
            name="set_track_volume",
            description="Set track volume in dB",
            inputSchema={
                "type": "object",
                "properties": {
                    "track_index": {
                        "type": "integer",
                        "description": "The track index (0-based)",
                        "minimum": 0
                    },
                    "volume": {
                        "type": "number",
                        "description": "Volume in dB (typically -150 to +12)"
                    }
                },
                "required": ["track_index", "volume"]
            }
        ),
Tool(
            name="get_track_pan",
            description="Get track pan position",
            inputSchema={
                "type": "object",
                "properties": {
                    "track_index": {
                        "type": "integer",
                        "description": "The track index (0-based)",
                        "minimum": 0
                    }
                },
                "required": ["track_index"]
            }
        ),
Tool(
            name="set_track_pan",
            description="Set track pan position",
            inputSchema={
                "type": "object",
                "properties": {
                    "track_index": {
                        "type": "integer",
                        "description": "The track index (0-based)",
                        "minimum": 0
                    },
                    "pan": {
                        "type": "number",
                        "description": "Pan position (-1=left, 0=center, 1=right)"
                    }
                },
                "required": ["track_index", "pan"]
            }
        ),
Tool(
            name="add_media_item_to_track",
            description="Add a new media item to a track",
            inputSchema={
                "type": "object",
                "properties": {
                    "track_index": {
                        "type": "integer",
                        "description": "The track index (0-based)",
                        "minimum": 0
                    }
                },
                "required": ["track_index"]
            }
        ),
Tool(
            name="count_media_items",
            description="Count total media items in project",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="get_media_item",
            description="Get media item by index",
            inputSchema={
                "type": "object",
                "properties": {
                    "item_index": {
                        "type": "integer",
                        "description": "The media item index (0-based)",
                        "minimum": 0
                    }
                },
                "required": ["item_index"]
            }
        ),
Tool(
            name="get_project_name",
            description="Get the current project name",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="get_project_path",
            description="Get the current project path",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="save_project",
            description="Save the current project",
            inputSchema={
                "type": "object",
                "properties": {
                    "force_save_as": {
                        "type": "boolean",
                        "description": "Force 'Save As' dialog"
                    }
                },
                "required": ["force_save_as"]
            }
        ),
Tool(
            name="get_cursor_position",
            description="Get the edit cursor position in seconds",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="set_cursor_position",
            description="Set the edit cursor position",
            inputSchema={
                "type": "object",
                "properties": {
                    "time": {
                        "type": "number",
                        "description": "Time in seconds"
                    },
                    "move_view": {
                        "type": "boolean",
                        "description": "Move view to cursor"
                    },
                    "seek_play": {
                        "type": "boolean",
                        "description": "Seek playback to cursor"
                    }
                },
                "required": ["time", "move_view", "seek_play"]
            }
        ),
Tool(
            name="get_play_state",
            description="Get current playback state",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="play",
            description="Start playback",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="stop",
            description="Stop playback",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="pause",
            description="Pause playback",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="run_action",
            description="Execute a REAPER action by command ID",
            inputSchema={
                "type": "object",
                "properties": {
                    "command_id": {
                        "type": "integer",
                        "description": "The action command ID"
                    },
                    "flag": {
                        "type": "integer",
                        "description": "Flag (0 for normal)",
                        "default": 0
                    }
                },
                "required": ["command_id"]
            }
        ),
Tool(
            name="undo_begin_block",
            description="Begin an undo block",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="undo_end_block",
            description="End an undo block",
            inputSchema={
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description for undo history"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "Flags (-1 for all)",
                        "default": -1
                    }
                },
                "required": ["description"]
            }
        ),
Tool(
            name="update_arrange",
            description="Update the arrange view",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),
Tool(
            name="update_timeline",
            description="Update the timeline display",
            inputSchema={
                "type": "object",
                "properties": {}
            }
        ),


# Handlers for app.py:

    elif name == "get_track_volume":
        track_index = arguments["track_index"]
        
        # First check if track exists
        track_result = bridge.call_lua("GetTrack", [0, track_index])
        if not track_result.get("ok") or not track_result.get("ret"):
            return [TextContent(
                type="text",
                text=f"Failed to find track at index {track_index}"
            )]
        
        result = bridge.call_lua("GetTrackVolume", [track_index])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Track {track_index} volume: {result.get('ret')} dB"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to get track volume: {result.get('error', 'Unknown error')}"
            )]

    elif name == "set_track_volume":
        track_index = arguments["track_index"]
        volume = arguments["volume"]
        
        # First check if track exists
        track_result = bridge.call_lua("GetTrack", [0, track_index])
        if not track_result.get("ok") or not track_result.get("ret"):
            return [TextContent(
                type="text",
                text=f"Failed to find track at index {track_index}"
            )]
        
        result = bridge.call_lua("SetTrackVolume", [track_index, volume])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Track {track_index} volume set to {volume} dB"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to set track volume: {result.get('error', 'Unknown error')}"
            )]

    elif name == "get_track_pan":
        track_index = arguments["track_index"]
        
        # First check if track exists
        track_result = bridge.call_lua("GetTrack", [0, track_index])
        if not track_result.get("ok") or not track_result.get("ret"):
            return [TextContent(
                type="text",
                text=f"Failed to find track at index {track_index}"
            )]
        
        result = bridge.call_lua("GetTrackPan", [track_index])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Track {track_index} pan: {result.get('ret')} (-1=left, 0=center, 1=right)"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to get track pan: {result.get('error', 'Unknown error')}"
            )]

    elif name == "set_track_pan":
        track_index = arguments["track_index"]
        pan = arguments["pan"]
        
        # First check if track exists
        track_result = bridge.call_lua("GetTrack", [0, track_index])
        if not track_result.get("ok") or not track_result.get("ret"):
            return [TextContent(
                type="text",
                text=f"Failed to find track at index {track_index}"
            )]
        
        result = bridge.call_lua("SetTrackPan", [track_index, pan])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Track {track_index} pan set to {pan}"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to set track pan: {result.get('error', 'Unknown error')}"
            )]

    elif name == "add_media_item_to_track":
        track_index = arguments["track_index"]
        
        # First check if track exists
        track_result = bridge.call_lua("GetTrack", [0, track_index])
        if not track_result.get("ok") or not track_result.get("ret"):
            return [TextContent(
                type="text",
                text=f"Failed to find track at index {track_index}"
            )]
        
        result = bridge.call_lua("AddMediaItemToTrack", [track_index])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Media item added to track {track_index}"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to add media item to track: {result.get('error', 'Unknown error')}"
            )]

    elif name == "count_media_items":
        result = bridge.call_lua("CountMediaItems", [0])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Total media items: {result.get('ret')}"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to count media items: {result.get('error', 'Unknown error')}"
            )]

    elif name == "get_media_item":
        item_index = arguments["item_index"]
        
        result = bridge.call_lua("GetMediaItem", [0, item_index])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Media item {item_index}: {result.get('ret')}"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to get media item: {result.get('error', 'Unknown error')}"
            )]

    elif name == "get_project_name":
        result = bridge.call_lua("GetProjectName", [0])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Project name: {result.get('ret', 'Untitled')}"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to get project name: {result.get('error', 'Unknown error')}"
            )]

    elif name == "get_project_path":
        result = bridge.call_lua("GetProjectPath", [0])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Project path: {result.get('ret', 'Not saved')}"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to get project path: {result.get('error', 'Unknown error')}"
            )]

    elif name == "save_project":
        force_save_as = arguments["force_save_as"]
        
        result = bridge.call_lua("Main_SaveProject", [0, force_save_as])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text="Project saved successfully"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to save project: {result.get('error', 'Unknown error')}"
            )]

    elif name == "get_cursor_position":
        result = bridge.call_lua("GetCursorPosition", [])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Cursor position: {result.get('ret')} seconds"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to get cursor position: {result.get('error', 'Unknown error')}"
            )]

    elif name == "set_cursor_position":
        time = arguments["time"]
        move_view = arguments["move_view"]
        seek_play = arguments["seek_play"]
        
        result = bridge.call_lua("SetEditCurPos", [time, move_view, seek_play])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Cursor moved to {time} seconds"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to set cursor position: {result.get('error', 'Unknown error')}"
            )]

    elif name == "get_play_state":
        result = bridge.call_lua("GetPlayState", [])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Play state: {['stopped', 'playing', 'paused', 'recording', 'record paused'][result.get('ret', 0)] if result.get('ret', 0) < 5 else 'unknown'}"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to get play state: {result.get('error', 'Unknown error')}"
            )]

    elif name == "play":
        result = bridge.call_lua("CSurf_OnPlay", [])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text="Playback started"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to play: {result.get('error', 'Unknown error')}"
            )]

    elif name == "stop":
        result = bridge.call_lua("CSurf_OnStop", [])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text="Playback stopped"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to stop: {result.get('error', 'Unknown error')}"
            )]

    elif name == "pause":
        result = bridge.call_lua("CSurf_OnPause", [])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text="Playback paused"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to pause: {result.get('error', 'Unknown error')}"
            )]

    elif name == "run_action":
        command_id = arguments["command_id"]
        flag = arguments.get("flag", 0)
        
        result = bridge.call_lua("Main_OnCommand", [command_id, flag or 0])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Action {command_id} executed"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to run action: {result.get('error', 'Unknown error')}"
            )]

    elif name == "undo_begin_block":
        result = bridge.call_lua("Undo_BeginBlock", [])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text="Undo block started"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to undo begin block: {result.get('error', 'Unknown error')}"
            )]

    elif name == "undo_end_block":
        description = arguments["description"]
        flags = arguments.get("flags", -1)
        
        result = bridge.call_lua("Undo_EndBlock", [description, flags or -1])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text=f"Undo block ended: {description}"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to undo end block: {result.get('error', 'Unknown error')}"
            )]

    elif name == "update_arrange":
        result = bridge.call_lua("UpdateArrange", [])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text="Arrange view updated"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to update arrange: {result.get('error', 'Unknown error')}"
            )]

    elif name == "update_timeline":
        result = bridge.call_lua("UpdateTimeline", [])
        
        if result.get("ok"):
            return [TextContent(
                type="text",
                text="Timeline updated"
            )]
        else:
            return [TextContent(
                type="text",
                text=f"Failed to update timeline: {result.get('error', 'Unknown error')}"
            )]



# Lua handlers for mcp_bridge.lua:

            elseif fname == "GetTrackVolume" then
                if #args >= 1 then
                    local track = reaper.GetTrack(0, args[1])
                    if track then
                        local vol = reaper.GetMediaTrackInfo_Value(track, "D_VOL")
                        local db = 20 * math.log(vol) / math.log(10)
                        response.ok = true
                        response.ret = db
                    else
                        response.error = "Track not found at index " .. tostring(args[1])
                    end
                else
                    response.error = "GetTrackVolume requires 1 argument(s)"
                end
            elseif fname == "SetTrackVolume" then
                if #args >= 2 then
                    local track = reaper.GetTrack(0, args[1])
                    if track then
                        local vol = 10^(args[2]/20)
                        reaper.SetMediaTrackInfo_Value(track, "D_VOL", vol)
                        response.ok = true
                    else
                        response.error = "Track not found at index " .. tostring(args[1])
                    end
                else
                    response.error = "SetTrackVolume requires 2 argument(s)"
                end
            elseif fname == "GetTrackPan" then
                if #args >= 1 then
                    local track = reaper.GetTrack(0, args[1])
                    if track then
                        local pan = reaper.GetMediaTrackInfo_Value(track, "D_PAN")
                        response.ok = true
                        response.ret = pan
                    else
                        response.error = "Track not found at index " .. tostring(args[1])
                    end
                else
                    response.error = "GetTrackPan requires 1 argument(s)"
                end
            elseif fname == "SetTrackPan" then
                if #args >= 2 then
                    local track = reaper.GetTrack(0, args[1])
                    if track then
                        reaper.SetMediaTrackInfo_Value(track, "D_PAN", args[2])
                        response.ok = true
                    else
                        response.error = "Track not found at index " .. tostring(args[1])
                    end
                else
                    response.error = "SetTrackPan requires 2 argument(s)"
                end
            elseif fname == "AddMediaItemToTrack" then
                if #args >= 1 then
                    local track = reaper.GetTrack(0, args[1])
                    if track then
                        local item = reaper.AddMediaItemToTrack(track)
                        response.ok = true
                        response.ret = item
                    else
                        response.error = "Track not found at index " .. tostring(args[1])
                    end
                else
                    response.error = "AddMediaItemToTrack requires 1 argument(s)"
                end
            elseif fname == "CountMediaItems" then
                    local count = reaper.CountMediaItems(0)
                    response.ok = true
                    response.ret = count
            elseif fname == "GetMediaItem" then
                if #args >= 1 then
                    local item = reaper.GetMediaItem(0, args[1])
                    response.ok = true
                    response.ret = item
                else
                    response.error = "GetMediaItem requires 1 argument(s)"
                end
            elseif fname == "GetProjectName" then
                    local ret, name = reaper.GetProjectName(0, "")
                    response.ok = true
                    response.ret = name
            elseif fname == "GetProjectPath" then
                    local path = reaper.GetProjectPath()
                    response.ok = true
                    response.ret = path
            elseif fname == "Main_SaveProject" then
                if #args >= 1 then
                    reaper.Main_SaveProject(0, args[1])
                    response.ok = true
                else
                    response.error = "Main_SaveProject requires 1 argument(s)"
                end
            elseif fname == "GetCursorPosition" then
                    local pos = reaper.GetCursorPosition()
                    response.ok = true
                    response.ret = pos
            elseif fname == "SetEditCurPos" then
                if #args >= 3 then
                    reaper.SetEditCurPos(args[1], args[2], args[3])
                    response.ok = true
                else
                    response.error = "SetEditCurPos requires 3 argument(s)"
                end
            elseif fname == "GetPlayState" then
                    local state = reaper.GetPlayState()
                    response.ok = true
                    response.ret = state
            elseif fname == "CSurf_OnPlay" then
                    reaper.CSurf_OnPlay()
                    response.ok = true
            elseif fname == "CSurf_OnStop" then
                    reaper.CSurf_OnStop()
                    response.ok = true
            elseif fname == "CSurf_OnPause" then
                    reaper.CSurf_OnPause()
                    response.ok = true
            elseif fname == "Main_OnCommand" then
                if #args >= 1 then
                    reaper.Main_OnCommand(args[1], args[2] or 0)
                    response.ok = true
                else
                    response.error = "Main_OnCommand requires 1 argument(s)"
                end
            elseif fname == "Undo_BeginBlock" then
                    reaper.Undo_BeginBlock()
                    response.ok = true
            elseif fname == "Undo_EndBlock" then
                if #args >= 1 then
                    reaper.Undo_EndBlock(args[1], args[2] or -1)
                    response.ok = true
                else
                    response.error = "Undo_EndBlock requires 1 argument(s)"
                end
            elseif fname == "UpdateArrange" then
                    reaper.UpdateArrange()
                    response.ok = true
            elseif fname == "UpdateTimeline" then
                    reaper.UpdateTimeline()
                    response.ok = true
